#!/bin/bash
#
# Build RPMs for Ganeti and Tools

set -euo pipefail

export LC_ALL=C

# RPM macros
RPM_DIST=$(egrep "\%dist" /etc/rpm/macros.dist | awk '{ print $2 }' | sed -E 's|^(\..*)\..*|\1|')

# python3_pkgversion for define option
PYTHON3_PKGVERSION_OPTION_EL8=3
PYTHON3_PKGVERSION_OPTION_EL7=36

# single packages
GANETI_DEPENDS_PACKAGES=()
GANETI_DEPENDS_PACKAGES_EL8=("python-bitarray")
GANETI_DEPENDS_PACKAGES_EL7=("python-inotify")
if [[ "${RPM_DIST}" = ".el8" ]]; then
    GANETI_DEPENDS_PACKAGES="${GANETI_DEPENDS_PACKAGES_EL8}"
elif [[ "${RPM_DIST}" = ".el7" ]]; then
    GANETI_DEPENDS_PACKAGES="${GANETI_DEPENDS_PACKAGES_EL7}"
fi
GANETI_PACKAGES="ganeti ganeti-instance-debootstrap"

# integ-ganeti repo
INTEG_GANETI_REPO_PACKAGES="integ-ganeti-release"

# sng-image
SNF_IMAGE_PACKAGES="python-prctl snf-image"

# all packages
PACKAGES="${GANETI_DEPENDS_PACKAGES} ${GANETI_PACKAGES} ${SNF_IMAGE_PACKAGES} ${INTEG_GANETI_REPO_PACKAGES}"

# Directories
PACKAGER="$(basename "${0}")"
PACKAGER_DIR="$(cd "$(dirname "${0}")" && echo "${PWD}")"
PACKAGER_RPM_DIR="${PACKAGER_DIR}/rpmbuild"

# Usage
usage() {
    cat << _EOF_

Usage:
    ${PACKAGER} [-s] [-i] [-u] [-c|-C] [-o yes|no] [-a|-d|-p package...]]

    Options:
        -a Build all packages (ganeti and its dependencies and integ-ganeti repo, snf-image).
        -d Build ganeti dependencies packages only.
        -p Build the specified package(s) only. Available packages are:
            ganeti dependencies (el8 only):
                ${GANETI_DEPENDS_PACKAGES_EL8}
            ganeti dependencies (el7 only):
                ${GANETI_DEPENDS_PACKAGES_EL7}
            ganeti:
                ${GANETI_PACKAGES}
            snf-image:
                ${SNF_IMAGE_PACKAGES}
            integ-ganeti-repo:
                ${INTEG_GANETI_REPO_PACKAGES}

        -c Clean the rpmbuild directory, but preserve downloaded archives.
        -C Completely clean the rpmbuild directory.

        -o Overwrite built package: yes|no (Default: manual)

        -s Sign built packages.

        -i Install built packages.
        -u Uninstall installed packages.

_EOF_
}

# Clean but preserve downloaded archives
clean_minimal() {
    echo "Cleaning..."
    rm -rf "${PACKAGER_RPM_DIR}"/*/{BUILD,BUILDROOT,RPMS,SRPMS}
}

# Clean everything
clean_all() {
    echo "Cleaning Everything..."
    rm -rf "${PACKAGER_RPM_DIR}"/*/{BUILD,BUILDROOT,RPMS,SRPMS}
    rm -f "${PACKAGER_RPM_DIR}"/*/SOURCES/*.{gz,bz2}
}

# Get package list
package_list() {
    local SPEC_FILE="${1}"
    local PACKAGE="${2}"
    local PACKAGE_PREFIX="${3}"

    local RPMBILD_BASE_DIR=$(dirname $(dirname "${SPEC_FILE}"))
    local RPM_VERSION=$(egrep -i "^Version:" "${SPEC_FILE}" | awk '{ print $2 }')
    local RPM_RELEASE=$(egrep -i "^Release:" "${SPEC_FILE}" | awk '{ print $2 }' | cut -d'%' -f 1)

    PACKAGE_LIST=()
    set +o pipefail
    # RPM
    PACKAGE_LIST+=( $(find "${RPMBILD_BASE_DIR}" -type f -regextype posix-basic \
        -regex ".*/RPMS/.*/${PACKAGE_PREFIX}-.*${RPM_VERSION}-${RPM_RELEASE}${RPM_DIST}.*.rpm") )
    # SRPM
    PACKAGE_LIST+=( $(find "${RPMBILD_BASE_DIR}" -type f -regextype posix-basic \
        -regex ".*/SRPMS/${PACKAGE}-.*${RPM_VERSION}-${RPM_RELEASE}${RPM_DIST}.*.rpm") )
    set -o pipefail

    if [[ ${#PACKAGE_LIST[@]} -ne 0 ]]; then
        echo ${PACKAGE_LIST[@]}
    fi
}

# Check old package
check_oldpackage() {
    local PACKAGE_LIST=(${@})
    local is_first=0

    if [[ ${#PACKAGE_LIST[@]} -eq 0 ]]; then
        return
    fi

    RPM_FILE=${PACKAGE_LIST[0]}
    if [[ -f "${RPM_FILE}" ]]; then
        if [[ "${OVERWRITE_MODE}" = "yes" ]]; then
            is_overwrite="y"
            return
        elif [[ "${OVERWRITE_MODE}" = "no" ]]; then
            is_overwrite="n"
            return
        fi

        echo "Found current version packages:"
        for i in ${PACKAGE_LIST[@]}; do
            echo "- ${i}"
        done

        while [[ "${is_overwrite}" != "y" ]] && [[ "${is_overwrite}" != "n" ]];
        do
            if [[ "${is_first}" -ne 0 ]]; then
                echo "-> BAD INPUT: Invalid charactor."
            fi
            echo -n "Do you want to rebuild and overwrite it? [y/n]: "
            read is_overwrite < /dev/tty
            is_first=1
        done
    else
        is_overwrite="y"
    fi
}

# Build package
build_package() {
    for PACKAGE in ${@}; do
        echo "Building package for ${PACKAGE}..."
        local PACKAGE_PREFIX="${PACKAGE}"

        # check python package
        local PYTHON3_PKGVERSION_OPTION=""
        # el8 only
        if [[ " ${GANETI_DEPENDS_PACKAGES_EL8[@]} " =~ " ${PACKAGE} " ]]; then
            PYTHON3_PKGVERSION_OPTION="--define \"python3_pkgversion ${PYTHON3_PKGVERSION_OPTION_EL8}\""
            PACKAGE_PREFIX=${PACKAGE_PREFIX/python/python${PYTHON3_PKGVERSION_OPTION_EL8}}
            if [[ "${RPM_DIST}" != ".el8" ]]; then
                echo "Skip ${PACKAGE} because it is for el8 only"
                continue
            fi
        fi
        # el7 only
        if [[ " ${GANETI_DEPENDS_PACKAGES_EL7[@]} " =~ " ${PACKAGE} " ]]; then
            PYTHON3_PKGVERSION_OPTION="--define \"python3_pkgversion ${PYTHON3_PKGVERSION_OPTION_EL7}\""
            PACKAGE_PREFIX=${PACKAGE_PREFIX/python/python${PYTHON3_PKGVERSION_OPTION_EL7}}
            if [[ "${RPM_DIST}" != ".el7" ]]; then
                echo "Skip ${PACKAGE} because it is for el7 only"
                continue
            fi
        fi

        local PACKAGE_SPEC_FILE="${PACKAGER_RPM_DIR}/${PACKAGE}/SPECS/${PACKAGE}.spec"
        local PACKAGE_LIST=( $(package_list "${PACKAGE_SPEC_FILE}" "${PACKAGE}" "${PACKAGE_PREFIX}") )

        is_overwrite="default"
        if [[ ${#PACKAGE_LIST[@]} -ne 0 ]]; then
            check_oldpackage "${PACKAGE_LIST[@]}"
        fi

        if [[ "${is_overwrite}" = "default" ]] || [[ "${is_overwrite}" = "y" ]]; then
            # Install build dependencies
            eval sudo yum-builddep -y ${PYTHON3_PKGVERSION_OPTION} "\"${PACKAGE_SPEC_FILE}\""

            # Download source and patch files
            local PACKAGE_SOURCES="${PACKAGER_RPM_DIR}/SOURCES"
            if [[ ! -d "${PACKAGE_SOURCES}" ]]; then
                mkdir "${PACKAGE_SOURCES}"
            fi
            eval spectool -g -A ${PYTHON3_PKGVERSION_OPTION} "\"${PACKAGE_SPEC_FILE}\"" -C "${PACKAGE_SOURCES}/"

            # Build package
            eval rpmbuild \
                --define "\"%_topdir ${PACKAGER_RPM_DIR}/${PACKAGE}\"" \
                --define "\"%dist ${RPM_DIST}\"" \
                ${PYTHON3_PKGVERSION_OPTION} \
                -ba "\"${PACKAGE_SPEC_FILE}\""
        fi

        # Install packages
        if [[ "${INSTALL_MODE}" = "yes" ]]; then
            local PACKAGE_LIST=( $(package_list "${PACKAGE_SPEC_FILE}" "${PACKAGE}" "${PACKAGE_PREFIX}") )
            install_package "${PACKAGE_LIST[@]}"
        fi

        echo
    done
}

# Check sign key
check_signkey() {
    SIGNKEY=$(gpg --list-keys | grep "Ganeti RPM Packages" | wc -l)
    if [[ "${SIGNKEY}" -lt 1 ]]; then
        echo "Error: Ganeti RPM Packages sign key not found."
        exit 1
        SIGN_MODE="no"
    fi
}

# Sign package
sign_package() {
    for PACKAGE in ${@}; do
        echo "Signing package for ${PACKAGE}..."
        pushd "${PACKAGER_RPM_DIR}/${PACKAGE}"

        SIGN_RPM_LIST=""
        RPM_FILE_LIST=$(find SRPMS RPMS -name "*.rpm")
        for RPM_FILE in ${RPM_FILE_LIST}; do
            IS_SIGNED=$(rpm -K "${RPM_FILE}" | grep -i "(md5) pgp" | wc -l)
            if [[ "${IS_SIGNED}" -eq 0 ]]; then
                SIGN_RPM_LIST="${SIGN_RPM_LIST} ${RPM_FILE}"
            else
                echo "Skip sign: ${RPM_FILE} is already signed."
            fi
        done
        [[ ! -z "${SIGN_RPM_LIST}" ]] && rpm --addsign ${SIGN_RPM_LIST}

        echo
        popd
    done
}

install_package() {
    echo "Install packages..."
    for PACKAGE in ${@}; do
        if [[ "${PACKAGE}" =~ \.src\.rpm$ ]]; then
            echo "Skip install source rpm: ${PACKAGE}"
            continue
        fi
        PACKAGE_NAME="${PACKAGE}"
        # /path/to/example-1.0.0.rpm -> example-1.0.0.rpm
        PACKAGE_NAME="${PACKAGE_NAME##*/}"
        # example-1.0.0.rpm -> example-1.0.0
        PACKAGE_NAME="${PACKAGE_NAME%.*}"

        set +e
        sudo yum list installed "${PACKAGE_NAME}" > /dev/null 2>&1
        RET=$?
        set -e
        if [[ "${RET}" -ne 0 ]]; then
            # Install target version package only
            echo "Install ${PACKAGE} package..."
            sudo yum -y install "${PACKAGE}"
        fi
    done
}

# Uninstall package
uninstall_package() {
    echo "Uninstall packages..."

    REMOVE_PACKAGES=""
    for PACKAGE in ${@}; do
        local PACKAGE_PREFIX="${PACKAGE}"

        # check python package
        local PYTHON3_PKGVERSION_OPTION=""
        # el8 only
        if [[ " ${GANETI_DEPENDS_PACKAGES_EL8[@]} " =~ " ${PACKAGE} " ]]; then
            PYTHON3_PKGVERSION_OPTION="--define \"python3_pkgversion ${PYTHON3_PKGVERSION_OPTION_EL8}\""
            PACKAGE_PREFIX=${PACKAGE_PREFIX/python/python${PYTHON3_PKGVERSION_OPTION_EL8}}
            if [[ "${RPM_DIST}" != ".el8" ]]; then
                echo "Skip ${PACKAGE} because it is for el8 only"
                continue
            fi
        fi
        # el7 only
        if [[ " ${GANETI_DEPENDS_PACKAGES_EL7[@]} " =~ " ${PACKAGE} " ]]; then
            PYTHON3_PKGVERSION_OPTION="--define \"python3_pkgversion ${PYTHON3_PKGVERSION_OPTION_EL7}\""
            PACKAGE_PREFIX=${PACKAGE_PREFIX/python/python${PYTHON3_PKGVERSION_OPTION_EL7}}
            if [[ "${RPM_DIST}" != ".el7" ]]; then
                echo "Skip ${PACKAGE} because it is for el7 only"
                continue
            fi
        fi

        local PACKAGE_SPEC_FILE="${PACKAGER_RPM_DIR}/${PACKAGE}/SPECS/${PACKAGE}.spec"
        local PACKAGE_LIST=( $(package_list "${PACKAGE_SPEC_FILE}" "${PACKAGE}" "${PACKAGE_PREFIX}") )

        if [[ ${#PACKAGE_LIST[@]} -ne 0 ]]; then
            for PACKAGE_NAME in ${PACKAGE_LIST[@]}; do
                # /path/to/example-1.0.0.rpm -> example-1.0.0.rpm
                PACKAGE_NAME="${PACKAGE_NAME##*/}"
                # example-1.0.0.rpm -> example-1.0.0
                PACKAGE_NAME="${PACKAGE_NAME%.*}"
                REMOVE_PACKAGES="${REMOVE_PACKAGES} ${PACKAGE_NAME}"
            done
        fi
    done

    if [[ ! -z "${REMOVE_PACKAGES}" ]]; then
        sudo yum -y remove ${REMOVE_PACKAGES}
        echo
    fi
}

# Main
main() {
    [[ $# -lt 1 ]] && usage && exit 1

    # See how we're called.
    SIGN_MODE="no"
    INSTALL_MODE="no"
    UNINSTALL_MODE="no"
    BUILD_ALL="no"
    BUILD_PACKAGES="no"
    BUILD_GANETI_DEPENDS_PACKAGES="no"
    CLEAN_MODE="no"
    OVERWRITE_MODE="manual"
    while getopts siuadpcCo: OPT; do
        case "${OPT}" in
            "s" )
                SIGN_MODE="yes"
                check_signkey ;;
            "i" )
                INSTALL_MODE="yes" ;;
            "u" )
                UNINSTALL_MODE="yes" ;;
            "a" )
                BUILD_ALL="yes" ;;
            "d" )
                BUILD_GANETI_DEPENDS_PACKAGES="yes" ;;
            "p" )
                BUILD_PACKAGES="yes" ;;
            "c" )
                CLEAN_MODE="minimal" ;;
            "C" )
                CLEAN_MODE="all" ;;
            "o" )
                OVERWRITE_MODE="${OPTARG}" ;;
            * )
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    # Clean task
    if [[ "${CLEAN_MODE}" = "minimal" ]]; then
        clean_minimal
    elif [[ "${CLEAN_MODE}" = "all" ]]; then
        clean_all
    fi

    # Uninstall task
    if [[ "${UNINSTALL_MODE}" = "yes" ]]; then
        if [[ "${BUILD_ALL}" = "yes" ]]; then
            uninstall_package "${PACKAGES}"
        else
            uninstall_package "${@}"
        fi
    fi

    # Sign or Build task
    if [[ "${SIGN_MODE}" = "yes" ]]; then
        if [[ "${BUILD_ALL}" = "yes" ]]; then
            sign_package "${PACKAGES}"
        elif [[ "${BUILD_PACKAGES}" = "yes" ]]; then
            sign_package "${@}"
        fi
    elif [[ "${BUILD_ALL}" = "yes" ]]; then
        build_package "${PACKAGES}"
    elif [[ "${BUILD_GANETI_DEPENDS_PACKAGES}" = "yes" ]]; then
        build_package "${GANETI_DEPENDS_PACKAGES}"
    elif [[ "${BUILD_PACKAGES}" = "yes" ]]; then
        build_package "${@}"
    fi

    echo "# Success: (${SECONDS} seconds)"
}

[[ ${#BASH_SOURCE[@]} = 1 ]] && main "${@}"

